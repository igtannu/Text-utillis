{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","data-bs-dismiss","aria-label","Navbar","mode","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","aboutText","onClick","togglemode","htmlFor","TextForm","useState","text","setText","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","disabled","length","newText","showAlert","i","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","element","About","myStyle","aria-labelledby","data-bs-parent","defaultProps","App","setMode","setAlert","message","setTimeout","cls","body","classList","remove","add","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.111307fe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n    \r\n      {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>}</div>\r\n\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n        \r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n      {/* <div className=\"d-flex\">\r\n        <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.togglemode('primary')} }style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.togglemode('danger')} }style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-success rounded mx-2\" onClick={()=>{props.togglemode('success')} }style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.togglemode('warning')} }style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n\r\n        \r\n      </div> */}\r\n\r\n\r\n\r\n      \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"  onClick={()=>{props.togglemode(null)}} />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Default switch checkbox input</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n  </nav>\r\n\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes= {\r\n    title:PropTypes.string,\r\n    aboutText:PropTypes.string\r\n}\r\n\r\n\r\nNavbar.defaultProps ={\r\n    title:'Title',\r\n    aboutText:'About'\r\n};","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    console.log(\"uppercase clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to upper Case\",\"success\");\r\n  };\r\n\r\n  const bold = () => {\r\n    let newText = \"\";\r\n    for (let i = text.length - 1; i >= 0; i--) newText += text[i];\r\n\r\n    setText(newText);\r\n    props.showAlert(\"Reverse String\",\"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"on Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    console.log(\"lowercase\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lower Case\",\"success\");\r\n  };\r\n\r\n  const copytext=()=>{\r\n    var text=document.getElementById(\"exampleFormControlTextarea1\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    document.getSelection().removeAllRanges()\r\n    props.showAlert(\"Copied to Clipboard\",\"success\");\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //setText(\"tanuu\");\r\n  return (\r\n    <>\r\n      <div className=\"container\" >\r\n        <h1 style={{color: props.mode==='dark'?'white':'black'}} >{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\"></label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: (props.mode === 'light' ? 'white' : '#13466e'),\r\n              color: (props.mode==='dark'?'white':'black')\r\n            }}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"></textarea>\r\n        </div>\r\n\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}> Convert To UpperCase  </button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert To LowerCase</button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={bold}> Reverse String  </button>\r\n        <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={copytext}> Copy Text  </button>\r\n      </div>\r\n      <div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          \r\n          {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words , {text.length} characters ,{\" \"}\r\n          {text.split(\" \").filter((element)=>{return element.length!==0}).length * 0.008} Mintues\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\" Enter Text Above\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nexport default function About(props) {\r\n     \r\n    // const [myStyle,setMyStyle]=useState({\r\n    //     color:'black',\r\n    //     backgroundColor:'white'\r\n    // })\r\n\r\n    let myStyle = {\r\n      color:props.mode === 'dark'?'white':'#042743',\r\n      backgroundColor: props.mode==='dark'?'rgb(36 74 104)':'white',\r\n      // border : '2px solid',\r\n      // borderColor: props.mode==='dark'?'white':'042743'\r\n    }\r\n\r\n\r\n\r\n    const [btnText,setBtnText]=useState(\"Enable Dark Mode\")\r\n\r\n    // const toggleStyle=()=>{\r\n    //     if(myStyle.color==='white'){\r\n    //         setMyStyle({\r\n    //         color:'black',\r\n    //         backgroundColor:'white'})\r\n    //         setBtnText(\"Enable dark Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color:'white',\r\n    //             backgroundColor:'black'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n\r\n    //     }\r\n    // }\r\n    \r\n\r\n\r\n  return (\r\n    <div className=\"container\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n      <h2>About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\">\r\n              <strong>Analyze your Text </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n            Text Utillis give you a way to analyze your text quickly and efficiently. Be it  Word count, character count , calculate time.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\">\r\n             <strong>Free To Use</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n               It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\">\r\n              <strong>Browser Compatibility</strong>    \r\n              </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n               It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <button className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n//import About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//let name=\"tanuu\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const removeBodyClasses = () => {\n    document.body.classList.remove(\"bg-light\");\n    document.body.classList.remove(\"bg-dark\");\n    document.body.classList.remove(\"bg-primary\");\n    document.body.classList.remove(\"bg-warning\");\n    document.body.classList.remove(\"bg-danger\");\n    document.body.classList.remove(\"bg-success\");\n  };\n\n  const togglemode = (cls) => {\n    removeBodyClasses();\n    console.log(cls);\n    document.body.classList.add(\"bg-\" + cls);\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n          <Router>\n        <Navbar title=\"Text Utillis\" mode={mode} togglemode={togglemode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter Text Below\"\n                mode={mode}   />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}